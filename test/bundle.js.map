{"version":3,"file":"bundle.js","sources":["natty-storage.spec.js"],"sourcesContent":["// https://github.com/Automattic/expect.js\ndocument.getElementById('mode').innerHTML = nattyStorage.supportStorage ? 'localStorage可用' : 'localStorage不可用'\n\nlet count = 1\nconst getId = function () {\n    return count++\n}\n\nconst _describe = function () {}\nconst _it = function (name, fn) {fn()}\n\ndescribe('nattyStorage v__VERSION__ Unit Test', function() {\n\n    describe('static', function () {\n        it('version v__VERSION__', function () {\n            expect(nattyStorage.version).to.equal('__VERSION__')\n        })\n        it('supportStorage', function () {\n            expect(nattyStorage.supportStorage).to.be.a('boolean')\n        })\n    })\n\n    describe('`set/has` method', function () {\n        let ls\n\n        beforeEach('reset', function () {\n            ls = nattyStorage({\n                type: 'localStorage',\n                key: 'foo'\n            })\n        })\n\n        afterEach('clear', function () {\n            ls.destroy()\n        })\n\n        it('`has` method without any argument: throw error', function () {\n            ls.set('foo', 'x')\n            const hasErrorFn = function () {\n                ls.has()\n            }\n            expect(hasErrorFn).to.throwError()\n        })\n\n        it('`has` method with `key`: has value', function () {\n            ls.set('foo', 'x')\n            const result = ls.has('foo')\n            expect(result.has).to.be(true)\n            expect(result.value).to.be('x')\n        })\n\n        it('`has` method with `key`: no value', function () {\n            ls.set('foo', 'x')\n            const result = ls.has('boo')\n            expect(result.has).to.be(false)\n            expect(result.value).to.be(undefined)\n        })\n\n        it('`has` method with `path`: has value', function () {\n            ls.set('foo.y', 'y')\n            const result = ls.has('foo')\n            expect(result.has).to.be(true)\n            expect(result.value.y).to.be('y')\n        })\n\n        it('`has` method with `path`: no value', function () {\n            ls.set('foo.y', 'y')\n            const result = ls.has('foo.y.z')\n            expect(result.has).to.be(false)\n            expect(result.value).to.be(undefined)\n        })\n    })\n\n\n    describe('`set/get` method', function () {\n        let ls\n\n        beforeEach('reset', function () {\n            ls = nattyStorage({\n                type: 'localStorage',\n                key: 'foo'\n            })\n        })\n\n        afterEach('clear', function () {\n            ls.destroy()\n        })\n\n        it('`get` method without `key|path` argument should return all data', function () {\n            ls.set('foo', 'x')\n\n            // 没有传入`path`，则返回整个缓存值\n            expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n        })\n\n        it('`get` method with `key`', function () {\n            ls.set('foo', 'x')\n\n            // 没有传入`path`，则返回整个缓存值\n            expect(ls.get('foo')).to.be('x')\n        })\n\n        it('`get` a false like value', function () {\n            ls.set('foo', 0)\n\n            // 没有传入`path`，则返回整个缓存值\n            expect(ls.get('foo')).to.be(0)\n        })\n\n        it('`get` with fallback value', function () {\n            // 没有传入`path`，则返回整个缓存值\n            expect(ls.get('foo', 'x')).to.be('x')\n        })\n\n        it('`set` method with wrong `path`', function () {\n            ls.set('foo', 'x')\n\n            const errorSet = function () {\n                // 给字符串又设置了属性值 应该抛错\n                ls.set('foo.boo', 'y')\n            }\n            expect(errorSet).to.throwError()\n            // set出错以后 需要恢复原值\n            expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n        })\n\n        it('`get` method with `\\\\\\\\ path`', function () {\n            ls.set('x.y\\\\.y.z', 'x')\n\n            // 没有传入`path`，则返回整个缓存值\n            expect(ls.get('x.y\\\\.y.z')).to.be('x')\n        })\n\n        it('`set` method with `undefined` value', function () {\n            ls.set('foo', undefined)\n            // 此时\n            // `storage`里对应的值的\"{}\"\n            // 而`ls._data`的值是 {x: undefined}\n            // `JSON.stringify`会删除值为`undefined`的键\n            // 没有传入`path`，则返回整个缓存值\n            expect(JSON.stringify(ls.get())).to.be('{}')\n        })\n    })\n\n    describe('`set/remove` method', function () {\n        let ls\n        const value = {\n            x: {\n                y: {\n                    z: 'z',\n                    zz: 'zz'\n                }\n            }\n        }\n\n        beforeEach('reset', function () {\n            ls = nattyStorage({\n                type: 'localStorage',\n                key: 'foo'\n            })\n        })\n\n        afterEach('clear', function () {\n            ls.destroy()\n        })\n\n        it('remove partial data by path', function() {\n            ls.set('foo', value)\n            ls.remove('foo.x.y.z')\n            expect(ls.get('foo.x.y.zz')).to.be('zz')\n        })\n\n        it('remove complete data by path', function () {\n            ls.set('foo', value)\n            ls.remove('foo.x.y')\n            expect(JSON.stringify(ls.get('foo.x'))).to.be('{}')\n        })\n\n        it('remove by a un-existed path', function () {\n            ls.set('foo', value)\n            ls.remove('foo.boo')\n            expect(JSON.stringify(ls.get('foo'))).to.be(JSON.stringify(value))\n        })\n\n        it('remove all data', function () {\n            ls.set('foo', value)\n            ls.remove()\n            expect(JSON.stringify(ls.get())).to.be('{}')\n        })\n    })\n    \n    describe('destroy', function () {\n        it('call method after `destroy` should throw error', function () {\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: 'foo'\n            })\n            ls.set('foo', 'x')\n            ls.destroy()\n\n            // 销毁之后就不能再调用任何方法了\n            const hasError = function () {\n                ls.get()\n            }\n            expect(hasError).to.throwError()\n        })\n    })\n\n    describe('`asyncSet/asyncGet` method', function () {\n        let ls\n\n        beforeEach('reset', function () {\n            ls = nattyStorage({\n                type: 'localStorage',\n                key: 'foo'\n            })\n        })\n\n        afterEach('clear', function () {\n            ls.destroy()\n        })\n\n        it('`asyncGet` method without `key` argument should return all data', function (done) {\n            ls.asyncSet('foo', 'x').then(() => {\n                // 没有传入`path`，则返回整个缓存值\n                ls.asyncGet().then(data => {\n                    expect(JSON.stringify(data)).to.be('{\"foo\":\"x\"}')\n                    done()\n                })\n            })\n        })\n\n        it('`asyncSet` method with wrong `path`', function (done) {\n            ls.set('foo', 'x')\n\n            // 给字符串又设置了属性值 应该抛错\n            ls.asyncSet('foo.boo', 'y').then(() => {}).catch(() => {\n                // set出错以后 需要恢复原值\n                expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n                done()\n            })\n        })\n    })\n\n    describe('valid checking', function() {\n\n        it('`tag` checking: invalid', function(){\n            const id = getId()\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id, // 保证之前不存在\n                tag: '1.0'\n            })\n\n            ls.set('foo', 'x')\n\n            // 版本过期\n            const ls2 = nattyStorage({\n                type: 'localStorage',\n                key: id, // 保证之前存在\n                tag: '2.0'\n            })\n\n            expect(JSON.stringify(ls2.get())).to.be('{}')\n            ls.destroy()\n            ls2.destroy()\n        })\n\n        it('`tag` checking: valid', function() {\n            const id = getId()\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id, // 保证之前不存在\n                tag: '1.0'\n            })\n\n            ls.set('foo', 'x')\n\n            // 版本不过期\n            const ls2 = nattyStorage({\n                type: 'localStorage',\n                key: id, // 保证之前存在\n                tag: '1.0'\n            })\n\n            expect(ls2.get('foo')).to.be('x')\n\n            ls.destroy()\n        })\n\n        it('`duration` checking：invalid', function (done) {\n            const id = 'test-expire'\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id,\n                duration: 200\n            })\n\n            ls.set('foo', 'x')\n\n            // 利用`setTimeout`创建过期\n            setTimeout(function () {\n                const ls2 = nattyStorage({\n                    type: 'localStorage',\n                    key: id,\n                    duration: 200\n                })\n\n                try {\n                    expect(JSON.stringify(ls2.get())).to.be('{}')\n                    ls.destroy()\n                    ls2.destroy()\n                    done()\n                } catch (e) {\n                    done(e)\n                }\n            }, 300)\n        })\n\n        it('`duration` checking：valid', function () {\n            const id = 'test-expire'\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id,\n                duration: 200\n            })\n\n            ls.set('foo', 'x')\n\n            const ls2 = nattyStorage({\n                type: 'localStorage',\n                key: id,\n                duration: 200\n            })\n\n            expect(ls2.get().foo).to.be('x')\n            ls.destroy()\n            ls2.destroy()\n        })\n\n        it('`until` checking: invalid', function () {\n            const id = 'until-invalid'\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id,\n                until: new Date(new Date().getTime() -1000).getTime() // 永远的上一秒\n            })\n\n            ls.set('foo', 'x')\n\n            const ls2 = nattyStorage({\n                type: 'localStorage',\n                key: id\n            })\n\n            expect(JSON.stringify(ls2.get())).to.be('{}')\n            ls.destroy()\n            ls2.destroy()\n        })\n\n        it('`until` checking: valid', function () {\n            const id = 'until-valid'\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id,\n                until: new Date().getTime() + 1000*60*60\n            })\n\n            ls.set('x', 'x')\n\n            const ls2 = nattyStorage({\n                type: 'localStorage',\n                key: id\n            })\n\n            expect(JSON.stringify(ls2.get())).to.be('{\"x\":\"x\"}')\n            ls.destroy()\n            ls2.destroy()\n        })\n    })\n\n    describe('clean', function () {\n        it('clean up `until` invalid storage', function () {\n\n            // 这是一个过期的缓存对象\n            const ls1 = nattyStorage({\n                type: 'localStorage',\n                key: 'clean',\n                until: new Date(new Date().getTime() -1000).getTime() // 永远的上一秒\n            })\n\n            ls1.set('foo', 'x')\n\n            // ls1的数据被清掉了\n            nattyStorage.clean()\n\n            // 不会有数据\n            const ls1next = nattyStorage({\n                type: 'localStorage',\n                key: 'clean-until',\n            })\n\n            expect(JSON.stringify(ls1next.get())).to.be('{}')\n            ls1next.destroy()\n        })\n\n        it('clean up `duration` invalid storage', function (done) {\n            // 这是一个过期的缓存对象\n            const ls1 = nattyStorage({\n                type: 'localStorage',\n                key: 'clean-duration',\n                duration: 100\n            })\n\n            ls1.set('foo', 'x')\n\n            // ls1的数据被清掉了\n            nattyStorage.clean()\n\n            setTimeout(function () {\n                // 不会有数据\n                const ls1next = nattyStorage({\n                    type: 'localStorage',\n                    key: 'clean-duration',\n                })\n                expect(JSON.stringify(ls1next.get())).to.be('{}')\n                ls1next.destroy()\n                done()\n            }, 300)\n        })\n\n\n    })\n})\n"],"names":["document","getElementById","innerHTML","nattyStorage","supportStorage","let","count","getId","const","describe","it","expect","version","to","equal","be","a","ls","beforeEach","type","key","afterEach","destroy","set","hasErrorFn","has","throwError","result","value","undefined","y","JSON","stringify","get","errorSet","x","z","zz","remove","hasError","done","asyncSet","then","asyncGet","data","id","tag","ls2","duration","setTimeout","e","foo","until","Date","getTime","clean","ls1next"],"mappings":"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"}