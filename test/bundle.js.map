{"version":3,"file":"bundle.js","sources":["natty-storage.spec.js","env.spec.js"],"sourcesContent":["// https://github.com/Automattic/expect.js\ndocument.getElementById('mode').innerHTML = nattyStorage.supportStorage ? 'localStorage可用' : 'localStorage不可用'\n\nlet count = 1\nconst getId = function () {\n  return count++\n}\n\n// const _describe = function () {}\n// const _it = function (name, fn) {fn()}\n\ndescribe('nattyStorage v__VERSION__ Unit Test', function() {\n\n  describe('static', function () {\n    it('version v__VERSION__', function () {\n      expect(nattyStorage.version).to.equal('__VERSION__')\n    })\n    it('supportStorage', function () {\n      expect(nattyStorage.supportStorage).to.be.a('boolean')\n    })\n  })\n\n  describe('`set/has` method', function () {\n    let ls\n\n    beforeEach('reset', function () {\n      ls = nattyStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n    })\n\n    afterEach('clear', function () {\n      ls.destroy()\n    })\n\n    it('`has` method without any argument: throw error', function () {\n      ls.set('foo', 'x')\n      const hasErrorFn = function () {\n        ls.has()\n      }\n      expect(hasErrorFn).to.throwError()\n    })\n\n    it('`has` method with `key`: has value', function () {\n      ls.set('foo', 'x')\n      const result = ls.has('foo')\n      expect(result.has).to.be(true)\n      expect(result.value).to.be('x')\n    })\n\n    it('`has` method with `key`: no value', function () {\n      ls.set('foo', 'x')\n      const result = ls.has('boo')\n      expect(result.has).to.be(false)\n      expect(result.value).to.be(undefined)\n    })\n\n    it('`has` method with `path`: has value', function () {\n      ls.set('foo.y', 'y')\n      const result = ls.has('foo')\n      expect(result.has).to.be(true)\n      expect(result.value.y).to.be('y')\n    })\n\n    it('`has` method with `path`: no value', function () {\n      ls.set('foo.y', 'y')\n      const result = ls.has('foo.y.z')\n      expect(result.has).to.be(false)\n      expect(result.value).to.be(undefined)\n    })\n  })\n\n\n  describe('`set/get` method', function () {\n    let ls\n\n    beforeEach('reset', function () {\n      ls = nattyStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n    })\n\n    afterEach('clear', function () {\n      ls.destroy()\n    })\n\n    it('`get` method without `key|path` argument should return all data', function () {\n      ls.set('foo', 'x')\n\n      // 没有传入`path`，则返回整个缓存值\n      expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n    })\n\n    it('`get` method with `key`', function () {\n      ls.set('foo', 'x')\n\n      // 没有传入`path`，则返回整个缓存值\n      expect(ls.get('foo')).to.be('x')\n    })\n\n    it('`get` a false like value', function () {\n      ls.set('foo', 0)\n\n      // 没有传入`path`，则返回整个缓存值\n      expect(ls.get('foo')).to.be(0)\n    })\n\n    it('`get` with fallback value', function () {\n      // 没有传入`path`，则返回整个缓存值\n      expect(ls.get('foo', 'x')).to.be('x')\n    })\n\n    it('`set` method with wrong `path`', function () {\n      ls.set('foo', 'x')\n\n      const errorSet = function () {\n        // 给字符串又设置了属性值 应该抛错\n        ls.set('foo.boo', 'y')\n      }\n      expect(errorSet).to.throwError()\n      // set出错以后 需要恢复原值\n      expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n    })\n\n    it('`get` method with `\\\\\\\\ path`', function () {\n      ls.set('x.y\\\\.y.z', 'x')\n\n      // 没有传入`path`，则返回整个缓存值\n      expect(ls.get('x.y\\\\.y.z')).to.be('x')\n    })\n\n    it('`set` method with `undefined` value', function () {\n      ls.set('foo', undefined)\n      // 此时\n      // `storage`里对应的值的\"{}\"\n      // 而`ls._data`的值是 {x: undefined}\n      // `JSON.stringify`会删除值为`undefined`的键\n      // 没有传入`path`，则返回整个缓存值\n      expect(JSON.stringify(ls.get())).to.be('{}')\n    })\n\n    it(`setting non-string for the key, should throw error`, function () {\n      const foo = nattyStorage({\n        type: 'variable',\n        key: 'foo',\n      })\n\n      const hasErrorFn = function () {\n        ls.set(true, {\n          dev: true,\n          pro: false,\n        })\n      }\n\n      expect(hasErrorFn).to.throwError()\n\n      foo.destroy()\n    })\n  })\n\n  describe('`set/sure` method', function () {\n    it('throw error when get undefined', function () {\n      const ls = nattyStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n\n      const hasErrorFn = () => {\n        ls.sure('foo.b')\n      }\n\n      expect(hasErrorFn).to.throwError()\n    })\n  })\n\n  describe('`set/remove` method', function () {\n    let ls\n    const value = {\n      x: {\n        y: {\n          z: 'z',\n          zz: 'zz',\n        },\n      },\n    }\n\n    beforeEach('reset', function () {\n      ls = nattyStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n    })\n\n    afterEach('clear', function () {\n      ls.destroy()\n    })\n\n    it('remove partial data by path', function() {\n      ls.set('foo', value)\n      ls.remove('foo.x.y.z')\n      expect(ls.get('foo.x.y.zz')).to.be('zz')\n    })\n\n    it('remove complete data by path', function () {\n      ls.set('foo', value)\n      ls.remove('foo.x.y')\n      expect(JSON.stringify(ls.get('foo.x'))).to.be('{}')\n    })\n\n    it('remove by a un-existed path', function () {\n      ls.set('foo', value)\n      ls.remove('foo.boo')\n      expect(JSON.stringify(ls.get('foo'))).to.be(JSON.stringify(value))\n    })\n\n    it('remove all data', function () {\n      ls.set('foo', value)\n      ls.remove()\n      expect(JSON.stringify(ls.get())).to.be('{}')\n    })\n  })\n\n  describe('destroy', function () {\n    it('call method after `destroy` should throw error', function () {\n      const ls = nattyStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n      ls.set('foo', 'x')\n      ls.destroy()\n\n      // 销毁之后就不能再调用任何方法了\n      const hasError = function () {\n        ls.get()\n      }\n      expect(hasError).to.throwError()\n    })\n  })\n\n  describe('`asyncSet/asyncGet` method', function () {\n    let ls\n\n    beforeEach('reset', function () {\n      ls = nattyStorage({\n        type: 'localStorage',\n        key: 'foo',\n      })\n    })\n\n    afterEach('clear', function () {\n      ls.destroy()\n    })\n\n    it('`asyncGet` method without `key` argument should return all data', function (done) {\n      ls.asyncSet('foo', 'x').then(() => {\n        // 没有传入`path`，则返回整个缓存值\n        ls.asyncGet().then(data => {\n          expect(JSON.stringify(data)).to.be('{\"foo\":\"x\"}')\n          done()\n        })\n      })\n    })\n\n    it('`asyncSet` method with wrong `path`', function (done) {\n      ls.set('foo', 'x')\n\n      // 给字符串又设置了属性值 应该抛错\n      ls.asyncSet('foo.boo', 'y').then(() => {}).catch(() => {\n        // set出错以后 需要恢复原值\n        expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n        done()\n      })\n    })\n  })\n\n  describe('valid checking', function() {\n\n    it('`tag` checking: invalid', function(){\n      const id = getId()\n      const ls = nattyStorage({\n        type: 'localStorage',\n        key: id, // 保证之前不存在\n        tag: '1.0',\n      })\n\n      ls.set('foo', 'x')\n\n      // 版本过期\n      const ls2 = nattyStorage({\n        type: 'localStorage',\n        key: id, // 保证之前存在\n        tag: '2.0',\n      })\n\n      expect(JSON.stringify(ls2.get())).to.be('{}')\n      ls.destroy()\n      ls2.destroy()\n    })\n\n    it('`tag` checking: valid', function() {\n      const id = getId()\n      const ls = nattyStorage({\n        type: 'localStorage',\n        key: id, // 保证之前不存在\n        tag: '1.0',\n      })\n\n      ls.set('foo', 'x')\n\n      // 版本不过期\n      const ls2 = nattyStorage({\n        type: 'localStorage',\n        key: id, // 保证之前存在\n        tag: '1.0',\n      })\n\n      expect(ls2.get('foo')).to.be('x')\n\n      ls.destroy()\n    })\n\n    it('`duration` checking：invalid', function (done) {\n      const id = 'test-expire'\n      const ls = nattyStorage({\n        type: 'localStorage',\n        key: id,\n        duration: 200,\n      })\n\n      ls.set('foo', 'x')\n\n      // 利用`setTimeout`创建过期\n      setTimeout(function () {\n        const ls2 = nattyStorage({\n          type: 'localStorage',\n          key: id,\n          duration: 200,\n        })\n\n        try {\n          expect(JSON.stringify(ls2.get())).to.be('{}')\n          ls.destroy()\n          ls2.destroy()\n          done()\n        } catch (e) {\n          done(e)\n        }\n      }, 300)\n    })\n\n    it('`duration` checking：valid', function () {\n      const id = 'test-expire'\n      const ls = nattyStorage({\n        type: 'localStorage',\n        key: id,\n        duration: 200,\n      })\n\n      ls.set('foo', 'x')\n\n      const ls2 = nattyStorage({\n        type: 'localStorage',\n        key: id,\n        duration: 200,\n      })\n\n      expect(ls2.get().foo).to.be('x')\n      ls.destroy()\n      ls2.destroy()\n    })\n\n    it('`until` checking: invalid', function () {\n      const id = 'until-invalid'\n      const ls = nattyStorage({\n        type: 'localStorage',\n        key: id,\n        until: new Date(new Date().getTime() -1000).getTime(), // 永远的上一秒\n      })\n\n      ls.set('foo', 'x')\n\n      const ls2 = nattyStorage({\n        type: 'localStorage',\n        key: id,\n      })\n\n      expect(JSON.stringify(ls2.get())).to.be('{}')\n      ls.destroy()\n      ls2.destroy()\n    })\n\n    it('`until` checking: valid', function () {\n      const id = 'until-valid'\n      const ls = nattyStorage({\n        type: 'localStorage',\n        key: id,\n        until: new Date().getTime() + 1000*60*60,\n      })\n\n      ls.set('x', 'x')\n\n      const ls2 = nattyStorage({\n        type: 'localStorage',\n        key: id,\n      })\n\n      expect(JSON.stringify(ls2.get())).to.be('{\"x\":\"x\"}')\n      ls.destroy()\n      ls2.destroy()\n    })\n  })\n\n  describe('clean', function () {\n    it('clean up `until` invalid storage', function () {\n\n      // 这是一个过期的缓存对象\n      const ls1 = nattyStorage({\n        type: 'localStorage',\n        key: 'clean',\n        until: new Date(new Date().getTime() -1000).getTime(), // 永远的上一秒\n      })\n\n      ls1.set('foo', 'x')\n\n      // ls1的数据被清掉了\n      nattyStorage.clean()\n\n      // 不会有数据\n      const ls1next = nattyStorage({\n        type: 'localStorage',\n        key: 'clean-until',\n      })\n\n      expect(JSON.stringify(ls1next.get())).to.be('{}')\n      ls1next.destroy()\n    })\n\n    it('clean up `duration` invalid storage', function (done) {\n      // 这是一个过期的缓存对象\n      const ls1 = nattyStorage({\n        type: 'localStorage',\n        key: 'clean-duration',\n        duration: 100,\n      })\n\n      ls1.set('foo', 'x')\n\n      // ls1的数据被清掉了\n      nattyStorage.clean()\n\n      setTimeout(function () {\n        // 不会有数据\n        const ls1next = nattyStorage({\n          type: 'localStorage',\n          key: 'clean-duration',\n        })\n        expect(JSON.stringify(ls1next.get())).to.be('{}')\n        ls1next.destroy()\n        done()\n      }, 300)\n    })\n  })\n})\n","// const _describe = function () {}\n// const _it = function (name, fn) {fn()}\n\ndescribe('nattyStorage.env', function() {\n\n  it('get value by env', function () {\n    const storage = nattyStorage({\n      type: 'variable',\n      key: 'config',\n    })\n\n    // 使用场景下这个值不是写死的，是运行环境的值\n    const NODE_ENV = 'development'\n\n    storage.set('api', nattyStorage.env(NODE_ENV, {\n      development: 'http://0.0.0.0/api',\n      production: 'http://foo.com/api',\n    }))\n\n    expect(storage.get('api')).to.be('http://0.0.0.0/api')\n  })\n\n  it('get `undefined` by env', function () {\n    const storage = nattyStorage({\n      type: 'variable',\n      key: 'config',\n    })\n\n    // 使用场景下这个值不是写死的，是运行环境的值\n    const NODE_ENV = 'test'\n\n    storage.set('api', nattyStorage.env(NODE_ENV, {\n      development: 'http://0.0.0.0/api',\n      production: 'http://foo.com/api',\n    }))\n\n    expect(storage.get('api')).to.be(undefined)\n  })\n\n  it('can not set value on env instance', function () {\n    const storage = nattyStorage({\n      type: 'variable',\n      key: 'config',\n    })\n\n    // 使用场景下这个值不是写死的，是运行环境的值\n    const NODE_ENV = 'production'\n\n    storage.set('foo.api', nattyStorage.env(NODE_ENV, {\n      development: 'http://0.0.0.0/api',\n      production: 'http://foo.com/api',\n    }))\n\n    // `env`对象不是`PlantObject`节点，所以不能有下层`path`，继续赋值会抛错\n    const hasErrorFn = () => {\n      storage.set('foo.api.test', 'hello')\n    }\n    expect(hasErrorFn).to.throwError()\n  })\n\n  it('env can not be used for localStorage', function () {\n    const storage = nattyStorage({\n      type: 'localStorage',\n      key: 'config',\n    })\n\n    const hasErrorFn = () => {\n      storage.set('api', nattyStorage.env('development', {\n        development: 'http://0.0.0.0/api',\n      }))\n    }\n\n    expect(hasErrorFn).to.throwError()\n  })\n\n  it('env can not be used for sessionStorage', function () {\n    const storage = nattyStorage({\n      type: 'sessionStorage',\n      key: 'config',\n    })\n\n    const hasErrorFn = () => {\n      storage.set('api', nattyStorage.env('development', {\n        development: 'http://0.0.0.0/api',\n      }))\n    }\n\n    expect(hasErrorFn).to.throwError()\n  })\n})"],"names":["document","getElementById","innerHTML","nattyStorage","supportStorage","let","count","getId","describe","it","expect","version","to","equal","be","a","ls","beforeEach","type","key","afterEach","destroy","set","const","hasErrorFn","has","throwError","result","value","undefined","y","JSON","stringify","get","errorSet","foo","dev","pro","sure","x","z","zz","remove","hasError","done","asyncSet","then","asyncGet","data","id","tag","ls2","duration","setTimeout","e","until","Date","getTime","clean","ls1next","storage","env","development","production"],"mappings":"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"}