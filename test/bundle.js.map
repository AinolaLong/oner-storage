{"version":3,"file":"bundle.js","sources":["natty-storage.spec.js","env.spec.js"],"sourcesContent":["// https://github.com/Automattic/expect.js\ndocument.getElementById('mode').innerHTML = nattyStorage.supportStorage ? 'localStorage可用' : 'localStorage不可用'\n\nlet count = 1\nconst getId = function () {\n    return count++\n}\n\nconst _describe = function () {}\nconst _it = function (name, fn) {fn()}\n\ndescribe('nattyStorage v__VERSION__ Unit Test', function() {\n\n    describe('static', function () {\n        it('version v__VERSION__', function () {\n            expect(nattyStorage.version).to.equal('__VERSION__')\n        })\n        it('supportStorage', function () {\n            expect(nattyStorage.supportStorage).to.be.a('boolean')\n        })\n    })\n\n    describe('`set/has` method', function () {\n        let ls\n\n        beforeEach('reset', function () {\n            ls = nattyStorage({\n                type: 'localStorage',\n                key: 'foo'\n            })\n        })\n\n        afterEach('clear', function () {\n            ls.destroy()\n        })\n\n        it('`has` method without any argument: throw error', function () {\n            ls.set('foo', 'x')\n            const hasErrorFn = function () {\n                ls.has()\n            }\n            expect(hasErrorFn).to.throwError()\n        })\n\n        it('`has` method with `key`: has value', function () {\n            ls.set('foo', 'x')\n            const result = ls.has('foo')\n            expect(result.has).to.be(true)\n            expect(result.value).to.be('x')\n        })\n\n        it('`has` method with `key`: no value', function () {\n            ls.set('foo', 'x')\n            const result = ls.has('boo')\n            expect(result.has).to.be(false)\n            expect(result.value).to.be(undefined)\n        })\n\n        it('`has` method with `path`: has value', function () {\n            ls.set('foo.y', 'y')\n            const result = ls.has('foo')\n            expect(result.has).to.be(true)\n            expect(result.value.y).to.be('y')\n        })\n\n        it('`has` method with `path`: no value', function () {\n            ls.set('foo.y', 'y')\n            const result = ls.has('foo.y.z')\n            expect(result.has).to.be(false)\n            expect(result.value).to.be(undefined)\n        })\n    })\n\n\n    describe('`set/get` method', function () {\n        let ls\n\n        beforeEach('reset', function () {\n            ls = nattyStorage({\n                type: 'localStorage',\n                key: 'foo'\n            })\n        })\n\n        afterEach('clear', function () {\n            ls.destroy()\n        })\n\n        it('`get` method without `key|path` argument should return all data', function () {\n            ls.set('foo', 'x')\n\n            // 没有传入`path`，则返回整个缓存值\n            expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n        })\n\n        it('`get` method with `key`', function () {\n            ls.set('foo', 'x')\n\n            // 没有传入`path`，则返回整个缓存值\n            expect(ls.get('foo')).to.be('x')\n        })\n\n        it('`get` a false like value', function () {\n            ls.set('foo', 0)\n\n            // 没有传入`path`，则返回整个缓存值\n            expect(ls.get('foo')).to.be(0)\n        })\n\n        it('`get` with fallback value', function () {\n            // 没有传入`path`，则返回整个缓存值\n            expect(ls.get('foo', 'x')).to.be('x')\n        })\n\n        it('`set` method with wrong `path`', function () {\n            ls.set('foo', 'x')\n\n            const errorSet = function () {\n                // 给字符串又设置了属性值 应该抛错\n                ls.set('foo.boo', 'y')\n            }\n            expect(errorSet).to.throwError()\n            // set出错以后 需要恢复原值\n            expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n        })\n\n        it('`get` method with `\\\\\\\\ path`', function () {\n            ls.set('x.y\\\\.y.z', 'x')\n\n            // 没有传入`path`，则返回整个缓存值\n            expect(ls.get('x.y\\\\.y.z')).to.be('x')\n        })\n\n        it('`set` method with `undefined` value', function () {\n            ls.set('foo', undefined)\n            // 此时\n            // `storage`里对应的值的\"{}\"\n            // 而`ls._data`的值是 {x: undefined}\n            // `JSON.stringify`会删除值为`undefined`的键\n            // 没有传入`path`，则返回整个缓存值\n            expect(JSON.stringify(ls.get())).to.be('{}')\n        })\n\n        it(`setting non-string for the key, should throw error`, function () {\n            const foo = nattyStorage({\n                type: 'variable',\n                key: 'foo'\n            })\n\n            const hasErrorFn = function () {\n              ls.set(true, {\n                  dev: true,\n                  pro: false\n              })\n            }\n\n            expect(hasErrorFn).to.throwError()\n\n            foo.destroy()\n        })\n    })\n\n    describe('`set/remove` method', function () {\n        let ls\n        const value = {\n            x: {\n                y: {\n                    z: 'z',\n                    zz: 'zz'\n                }\n            }\n        }\n\n        beforeEach('reset', function () {\n            ls = nattyStorage({\n                type: 'localStorage',\n                key: 'foo'\n            })\n        })\n\n        afterEach('clear', function () {\n            ls.destroy()\n        })\n\n        it('remove partial data by path', function() {\n            ls.set('foo', value)\n            ls.remove('foo.x.y.z')\n            expect(ls.get('foo.x.y.zz')).to.be('zz')\n        })\n\n        it('remove complete data by path', function () {\n            ls.set('foo', value)\n            ls.remove('foo.x.y')\n            expect(JSON.stringify(ls.get('foo.x'))).to.be('{}')\n        })\n\n        it('remove by a un-existed path', function () {\n            ls.set('foo', value)\n            ls.remove('foo.boo')\n            expect(JSON.stringify(ls.get('foo'))).to.be(JSON.stringify(value))\n        })\n\n        it('remove all data', function () {\n            ls.set('foo', value)\n            ls.remove()\n            expect(JSON.stringify(ls.get())).to.be('{}')\n        })\n    })\n\n    describe('destroy', function () {\n        it('call method after `destroy` should throw error', function () {\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: 'foo'\n            })\n            ls.set('foo', 'x')\n            ls.destroy()\n\n            // 销毁之后就不能再调用任何方法了\n            const hasError = function () {\n                ls.get()\n            }\n            expect(hasError).to.throwError()\n        })\n    })\n\n    describe('`asyncSet/asyncGet` method', function () {\n        let ls\n\n        beforeEach('reset', function () {\n            ls = nattyStorage({\n                type: 'localStorage',\n                key: 'foo'\n            })\n        })\n\n        afterEach('clear', function () {\n            ls.destroy()\n        })\n\n        it('`asyncGet` method without `key` argument should return all data', function (done) {\n            ls.asyncSet('foo', 'x').then(() => {\n                // 没有传入`path`，则返回整个缓存值\n                ls.asyncGet().then(data => {\n                    expect(JSON.stringify(data)).to.be('{\"foo\":\"x\"}')\n                    done()\n                })\n            })\n        })\n\n        it('`asyncSet` method with wrong `path`', function (done) {\n            ls.set('foo', 'x')\n\n            // 给字符串又设置了属性值 应该抛错\n            ls.asyncSet('foo.boo', 'y').then(() => {}).catch(() => {\n                // set出错以后 需要恢复原值\n                expect(JSON.stringify(ls.get())).to.be('{\"foo\":\"x\"}')\n                done()\n            })\n        })\n    })\n\n    describe('valid checking', function() {\n\n        it('`tag` checking: invalid', function(){\n            const id = getId()\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id, // 保证之前不存在\n                tag: '1.0'\n            })\n\n            ls.set('foo', 'x')\n\n            // 版本过期\n            const ls2 = nattyStorage({\n                type: 'localStorage',\n                key: id, // 保证之前存在\n                tag: '2.0'\n            })\n\n            expect(JSON.stringify(ls2.get())).to.be('{}')\n            ls.destroy()\n            ls2.destroy()\n        })\n\n        it('`tag` checking: valid', function() {\n            const id = getId()\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id, // 保证之前不存在\n                tag: '1.0'\n            })\n\n            ls.set('foo', 'x')\n\n            // 版本不过期\n            const ls2 = nattyStorage({\n                type: 'localStorage',\n                key: id, // 保证之前存在\n                tag: '1.0'\n            })\n\n            expect(ls2.get('foo')).to.be('x')\n\n            ls.destroy()\n        })\n\n        it('`duration` checking：invalid', function (done) {\n            const id = 'test-expire'\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id,\n                duration: 200\n            })\n\n            ls.set('foo', 'x')\n\n            // 利用`setTimeout`创建过期\n            setTimeout(function () {\n                const ls2 = nattyStorage({\n                    type: 'localStorage',\n                    key: id,\n                    duration: 200\n                })\n\n                try {\n                    expect(JSON.stringify(ls2.get())).to.be('{}')\n                    ls.destroy()\n                    ls2.destroy()\n                    done()\n                } catch (e) {\n                    done(e)\n                }\n            }, 300)\n        })\n\n        it('`duration` checking：valid', function () {\n            const id = 'test-expire'\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id,\n                duration: 200\n            })\n\n            ls.set('foo', 'x')\n\n            const ls2 = nattyStorage({\n                type: 'localStorage',\n                key: id,\n                duration: 200\n            })\n\n            expect(ls2.get().foo).to.be('x')\n            ls.destroy()\n            ls2.destroy()\n        })\n\n        it('`until` checking: invalid', function () {\n            const id = 'until-invalid'\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id,\n                until: new Date(new Date().getTime() -1000).getTime() // 永远的上一秒\n            })\n\n            ls.set('foo', 'x')\n\n            const ls2 = nattyStorage({\n                type: 'localStorage',\n                key: id\n            })\n\n            expect(JSON.stringify(ls2.get())).to.be('{}')\n            ls.destroy()\n            ls2.destroy()\n        })\n\n        it('`until` checking: valid', function () {\n            const id = 'until-valid'\n            const ls = nattyStorage({\n                type: 'localStorage',\n                key: id,\n                until: new Date().getTime() + 1000*60*60\n            })\n\n            ls.set('x', 'x')\n\n            const ls2 = nattyStorage({\n                type: 'localStorage',\n                key: id\n            })\n\n            expect(JSON.stringify(ls2.get())).to.be('{\"x\":\"x\"}')\n            ls.destroy()\n            ls2.destroy()\n        })\n    })\n\n    describe('clean', function () {\n        it('clean up `until` invalid storage', function () {\n\n            // 这是一个过期的缓存对象\n            const ls1 = nattyStorage({\n                type: 'localStorage',\n                key: 'clean',\n                until: new Date(new Date().getTime() -1000).getTime() // 永远的上一秒\n            })\n\n            ls1.set('foo', 'x')\n\n            // ls1的数据被清掉了\n            nattyStorage.clean()\n\n            // 不会有数据\n            const ls1next = nattyStorage({\n                type: 'localStorage',\n                key: 'clean-until',\n            })\n\n            expect(JSON.stringify(ls1next.get())).to.be('{}')\n            ls1next.destroy()\n        })\n\n        it('clean up `duration` invalid storage', function (done) {\n            // 这是一个过期的缓存对象\n            const ls1 = nattyStorage({\n                type: 'localStorage',\n                key: 'clean-duration',\n                duration: 100\n            })\n\n            ls1.set('foo', 'x')\n\n            // ls1的数据被清掉了\n            nattyStorage.clean()\n\n            setTimeout(function () {\n                // 不会有数据\n                const ls1next = nattyStorage({\n                    type: 'localStorage',\n                    key: 'clean-duration',\n                })\n                expect(JSON.stringify(ls1next.get())).to.be('{}')\n                ls1next.destroy()\n                done()\n            }, 300)\n        })\n\n\n    })\n})\n","const _describe = function () {}\nconst _it = function (name, fn) {fn()}\n\ndescribe('nattyStorage.env', function() {\n\n  it('get value by env', function () {\n    const storage = nattyStorage({\n      type: 'variable',\n      key: 'config',\n    })\n\n    // 使用场景下这个值不是写死的，是运行环境的值\n    const NODE_ENV = 'development'\n\n    storage.set('api', nattyStorage.env(NODE_ENV, {\n      development: 'http://0.0.0.0/api',\n      production: 'http://foo.com/api',\n    }))\n\n    expect(storage.get('api')).to.be('http://0.0.0.0/api')\n  })\n\n  it('get `undefined` by env', function () {\n    const storage = nattyStorage({\n      type: 'variable',\n      key: 'config',\n    })\n\n    // 使用场景下这个值不是写死的，是运行环境的值\n    const NODE_ENV = 'test'\n\n    storage.set('api', nattyStorage.env(NODE_ENV, {\n      development: 'http://0.0.0.0/api',\n      production: 'http://foo.com/api',\n    }))\n\n    expect(storage.get('api')).to.be(undefined)\n  })\n\n  it('can not set value on env instance', function () {\n    const storage = nattyStorage({\n      type: 'variable',\n      key: 'config',\n    })\n\n    // 使用场景下这个值不是写死的，是运行环境的值\n    const NODE_ENV = 'production'\n\n    storage.set('foo.api', nattyStorage.env(NODE_ENV, {\n      development: 'http://0.0.0.0/api',\n      production: 'http://foo.com/api'\n    }))\n\n    // `env`对象不是`PlantObject`节点，所以不能有下层`path`，继续赋值会抛错\n    const hasErrorFn = () => {\n      storage.set('foo.api.test', 'hello')\n    }\n    expect(hasErrorFn).to.throwError()\n  })\n})"],"names":["document","getElementById","innerHTML","nattyStorage","supportStorage","let","count","getId","const","describe","it","expect","version","to","equal","be","a","ls","beforeEach","type","key","afterEach","destroy","set","hasErrorFn","has","throwError","result","value","undefined","y","JSON","stringify","get","errorSet","foo","dev","pro","x","z","zz","remove","hasError","done","asyncSet","then","asyncGet","data","id","tag","ls2","duration","setTimeout","e","until","Date","getTime","clean","ls1next","storage","env","development","production"],"mappings":"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"}